{"version":3,"sources":["Temperature.js","WeatherIcon.js","WeatherSummary.js","FiveDayForecast.js","SearchBar.js","util.js","WeatherDetails.js","App.js","reportWebVitals.js","index.js"],"names":["Temperature","temp","WeatherIcon","iconId","url","src","alt","WeatherSummary","dayOfWeek","icon","highTemp","lowTemp","isActive","index","onSelected","className","onClick","FiveDayForecast","forecast","activeDay","onActiveDayChanged","slice","map","weatherData","Math","round","SearchBar","handleSearch","useState","location","setLocation","onSubmit","event","preventDefault","type","id","value","onChange","e","target","placeholder","required","xmlns","width","height","fill","class","viewBox","d","getCoordinates","a","process","fetch","response","json","data","results","locations","latLng","getLocationName","lat","lon","console","log","adminArea5","getWeatherData","latitude","longitude","units","apiKey","current","daily","millisecondsToDayOfWeek","millis","Date","getDay","WeatherDetails","props","weatherCondition","isNaN","currentTemp","precipitation","toFixed","humidity","windSpeed","App","state","isLoading","weather","error","city","handleActiveDayChange","bind","handleSearchSubmit","navigator","geolocation","getCurrentPosition","position","coords","setState","prevProps","prevState","this","newActiveDay","lng","newCity","content","dt","description","min","max","pop","wind_speed","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64ef1982.chunk.js","sourcesContent":["  \r\nimport PropTypes from 'prop-types';\r\n\r\nconst Temperature = ({ temp }) => <span>{temp}&deg;</span>;\r\n\r\nTemperature.propTypes = {\r\n    temp: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Temperature;","const WeatherIcon = ({ iconId }) => {\r\n    const url = `http://openweathermap.org/img/wn/${iconId}@2x.png`\r\n    return (\r\n        <img \r\n            src={url} \r\n            alt='weather icon' \r\n        />\r\n    )\r\n}\r\n\r\nexport default WeatherIcon;","import PropTypes from \"prop-types\";\r\nimport Temperature from \"./Temperature\";\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nconst WeatherSummary = ({ dayOfWeek, icon, highTemp, lowTemp, isActive, index, onSelected }) => (\r\n  <div \r\n    className={`WeatherSummary ${isActive ? \"WeatherSummary-active\" : \"\"}`} \r\n    onClick={() => onSelected(index)}\r\n  >\r\n    <p>{dayOfWeek}</p>\r\n    <WeatherIcon iconId={icon} />\r\n    <div className=\"WeatherSummary-temps\">\r\n      <Temperature temp={highTemp} />\r\n      <Temperature temp={lowTemp} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nWeatherSummary.propTypes = {\r\n    dayOfWeek: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired,\r\n    highTemp: PropTypes.number.isRequired,\r\n    lowTemp: PropTypes.number.isRequired \r\n};\r\n  \r\n\r\nexport default WeatherSummary;","import WeatherSummary from \"./WeatherSummary\"\r\n\r\nconst FiveDayForecast = ({ forecast, activeDay, onActiveDayChanged }) => {\r\n\r\n    return (\r\n        <div>\r\n            {forecast.slice(0,5).map((weatherData, index) =>\r\n                <WeatherSummary\r\n                    key={index}\r\n                    dayOfWeek={weatherData.dayOfWeek}\r\n                    index={index}\r\n                    icon={weatherData.icon}\r\n                    highTemp={Math.round(weatherData.highTemp)}\r\n                    lowTemp={Math.round(weatherData.lowTemp)}\r\n                    isActive={activeDay === index}\r\n                    onSelected={(index) => onActiveDayChanged(index)}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FiveDayForecast;","import { useState } from 'react';\r\n\r\nconst SearchBar = ({handleSearch}) => {\r\n    const [location, setLocation] = useState('');\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        handleSearch(location);\r\n        setLocation('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input \r\n                    type=\"search\" \r\n                    id=\"locationSearch\" \r\n                    value={location}\r\n                    onChange={e => setLocation(e.target.value)}\r\n                    placeholder='Search city name'\r\n                    required\r\n                />\r\n                <button type='submit'>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-search\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\"/>\r\n                </svg>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBar;","\r\n/**\r\n * Returns a Promise with an object containing the latitude and longitude\r\n * coordinates of the specified location.\r\n * \r\n * The returned object has the format { lat: number, lng: number }.\r\n * \r\n * @param {string} location A city, point of interest, etc to get the geographic\r\n *                          coordinates of.\r\n */\r\nexport const getCoordinates = async (location) => {\r\n    const apiKey = process.env.REACT_APP_MAPQUEST_APIKEY;\r\n    const apiUrl = 'http://www.mapquestapi.com/geocoding/v1/address';\r\n    const response = await fetch(`${apiUrl}?key=${apiKey}&location=${location}`)\r\n    const data = await response.json();\r\n    return data.results[0].locations[0].latLng;\r\n};\r\n\r\nexport const getLocationName = async (lat, lon) => {\r\n    const location = lat + ',' + lon;\r\n    const apiKey = process.env.REACT_APP_MAPQUEST_APIKEY;\r\n    const apiURL = 'http://www.mapquestapi.com/geocoding/v1/reverse';\r\n    const response = await fetch(`${apiURL}?key=${apiKey}&location=${location}`)\r\n    const data = await response.json();\r\n    console.log(data)\r\n    return data.results[0].locations[0].adminArea5;\r\n}\r\n\r\n  \r\nexport const getWeatherData = async (latitude, longitude, units='imperial') => {\r\n    const apiUrl = 'https://api.openweathermap.org/data/2.5/onecall';\r\n    const apiKey = process.env.REACT_APP_OPENWEATHER_APIKEY;\r\n    const url = `${apiUrl}?lat=${latitude}&lon=${longitude}&units=${units}&appid=${apiKey}`;\r\n    const response = await fetch(url);\r\n    // There's a lot of data in the returned object, but we'll only need\r\n    // the current weather and the daily 7 day forecast for the project.\r\n    const { current, daily } = await response.json();\r\n    return { current, daily };\r\n};\r\n\r\nexport const millisecondsToDayOfWeek = (millis) => {\r\n    const day = new Date(millis);\r\n    const days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n    return days[day.getDay()];\r\n};","import PropTypes from 'prop-types';\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nconst WeatherDetails = (props) => {\r\n    return (\r\n        <div className=\"WeatherDetails\">\r\n            <p className=\"text_large\">{props.location}</p>\r\n            <p>{props.dayOfWeek}</p>\r\n            <p>{props.weatherCondition}</p>\r\n            <div className=\"details_wrapper\">\r\n                <div className=\"icon_and_current\">\r\n                    <WeatherIcon iconId={props.icon} />\r\n                    <span className=\"text_large\">{\r\n                        isNaN(props.currentTemp)?props.currentTemp:Math.round(props.currentTemp)}\r\n                    </span>\r\n                    <span>&deg;F</span>\r\n                    <span>|</span>\r\n                    <span>&deg;C</span>\r\n                </div>\r\n                <div>\r\n                    <p>High: {Math.round(props.highTemp)}&deg;</p>\r\n                    <p>Low: {Math.round(props.lowTemp)}&deg;</p>\r\n                    <p>Precipitation: {props.precipitation.toFixed(0)}%</p>\r\n                    <p>Humidity: {props.humidity}%</p>\r\n                    <p>Wind: {props.windSpeed} {props.units === 'imperial' ? 'mph' : 'km/h'}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nWeatherDetails.propTypes = {\r\n    location: PropTypes.string.isRequired,\r\n    dayOfWeek: PropTypes.string.isRequired,\r\n    weatherCondition: PropTypes.string.isRequired,\r\n    icon: PropTypes.string.isRequired,\r\n    units: PropTypes.oneOf(['imperial', 'metric']),\r\n    currentTemp: PropTypes.number,\r\n    lowTemp: PropTypes.number.isRequired,\r\n    highTemp: PropTypes.number.isRequired,\r\n    precipitation: PropTypes.number.isRequired, \r\n    humidity: PropTypes.number.isRequired, \r\n    windSpeed: PropTypes.number.isRequired, \r\n}\r\n\r\nexport default WeatherDetails;","import React from 'react';\r\nimport FiveDayForecast from './FiveDayForecast';\r\nimport SearchBar from './SearchBar';\r\nimport { getCoordinates, getLocationName, getWeatherData, millisecondsToDayOfWeek } from './util.js';\r\nimport WeatherDetails from './WeatherDetails';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: true,\r\n      weather: null,\r\n      error: null,\r\n      activeDay: 0,\r\n      latitude: null,\r\n      longitude: null,\r\n      city: 'Fresno'\r\n    };\r\n\r\n    this.handleActiveDayChange = this.handleActiveDayChange.bind(this);\r\n    this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n\r\n        try {\r\n          // If we successfully get data from the weather API, then we\r\n          // update our state with the new data that we got.\r\n          const weatherData = await getWeatherData(latitude, longitude);\r\n          this.setState({\r\n            weather: weatherData,\r\n            isLoading: false,\r\n          });\r\n        } catch(error) {\r\n          // If there's a problem getting data from the API, we want to inform\r\n          // the user that there was an error.\r\n          this.setState({\r\n            error: 'Oh no 😔 We were unable to get weather data at this time.',\r\n            isLoading: false\r\n          });\r\n        }\r\n\r\n      },\r\n      (error) => {\r\n        // If there's an error when we try to get the users current location,\r\n        // for example if the user blocks location services, then we want to\r\n        // show the user an error message.\r\n        this.setState({\r\n          error: 'Ooops 😓 We were unable to get your current location.',\r\n          isLoading: false\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n async componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.latitude !== this.state.latitude) {\r\n      try {\r\n          // If we successfully get data from the weather API, then we\r\n          // update our state with the new data that we got.\r\n          const weatherData = await getWeatherData(this.state.latitude, this.state.longitude);\r\n          this.setState({\r\n            weather: weatherData,\r\n            isLoading: false,\r\n          });\r\n        } catch(error) {\r\n          // If there's a problem getting data from the API, we want to inform\r\n          // the user that there was an error.\r\n          this.setState({\r\n            error: 'Oh no 😔 We were unable to get weather data at this time.',\r\n            isLoading: false\r\n          });\r\n        }\r\n    }\r\n  }\r\n  \r\n\r\n  handleActiveDayChange(newActiveDay) {\r\n    this.setState({\r\n      activeDay: newActiveDay\r\n    });\r\n  };\r\n\r\n  async handleSearchSubmit(location) {\r\n    const {lat, lng} = await getCoordinates(location);\r\n    const newCity = await getLocationName(lat, lng);\r\n    this.setState({\r\n      longitude: lng,\r\n      latitude: lat,\r\n      city: newCity\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { isLoading, weather, error, activeDay } = this.state;\r\n    // Instead of doing nested ternary statements, I pulled this section out\r\n    // into a variable to make the code a little bit easier to read. The\r\n    // 'contets' variable just stores some JSX, and we can tell React to render\r\n    // that JSX by putting the variable in curly braces.\r\n    const content = (\r\n      <>\r\n        {error\r\n          ? <p>{error}</p>\r\n          : weather &&\r\n            <>\r\n              <SearchBar handleSearch={this.handleSearchSubmit} />\r\n              <WeatherDetails\r\n                  location={this.state.city}\r\n                  dayOfWeek={millisecondsToDayOfWeek(1000*weather.daily[activeDay].dt)}\r\n                  weatherCondition={weather.daily[activeDay].weather[0].description}\r\n                  icon={weather.daily[activeDay].weather[0].icon}\r\n                  units=\"imperial\"\r\n                  currentTemp={activeDay === 0 ? weather.current.temp: '-'}\r\n                  lowTemp={weather.daily[activeDay].temp.min}\r\n                  highTemp={weather.daily[activeDay].temp.max}\r\n                  precipitation={weather.daily[activeDay].pop*100} \r\n                  humidity={weather.daily[activeDay].humidity} \r\n                  windSpeed={weather.daily[activeDay].wind_speed}\r\n              />\r\n              <FiveDayForecast forecast={weather.daily.map(data => {\r\n                return {\r\n                  dayOfWeek: millisecondsToDayOfWeek(data.dt*1000),\r\n                  icon: data.weather[0].icon,\r\n                  highTemp: data.temp.max,\r\n                  lowTemp: data.temp.min\r\n                }\r\n              })} \r\n                activeDay={activeDay}\r\n                onActiveDayChanged={this.handleActiveDayChange}\r\n              />\r\n            </>\r\n        }\r\n      </>\r\n    )\r\n\r\n    return (\r\n      <div>\r\n        {isLoading\r\n          ? <p>Loading...⏳</p>\r\n          : <>{content}</>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}